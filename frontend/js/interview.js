document.addEventListener('DOMContentLoaded', function() {
    let sessionId = null;
    const chatBox = document.getElementById("chat-box");
    const setupSection = document.getElementById("setup-section");
    const chatSection = document.getElementById("chat-section");
    const userInput = document.getElementById("user-answer");
    const voiceBtn = document.getElementById("voice-btn");

    // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫, —Ç–µ–∫—Å –∏ —Ç–µ–º—É –∏–∑ localStorage
    const resumeData = JSON.parse(localStorage.getItem('resume_data') || '{}');
    const selectedLanguage = resumeData.language || 'ru';
    const resumeText = resumeData.resume_text || '';
    const topic = resumeData.topic || '';
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
    const languageMap = {
        'ru': 'ru-RU',
        'en': 'en-US'
    };
    const speechLang = languageMap[selectedLanguage] || 'ru-RU';

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    addMessage("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –æ–Ω–ª–∞–π–Ω-—Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ! –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ'.", "bot");

    function addMessage(text, sender) {
        const div = document.createElement("div");
        div.className = `msg ${sender}`;
        div.innerHTML = `<strong>${sender === 'bot' ? '–°–∏—Å—Ç–µ–º–∞' : '–í—ã'}:</strong> ${text}`;
        chatBox.appendChild(div);
        chatBox.scrollTop = chatBox.scrollHeight;
    }

    window.startInterview = async function() {
        try {
            
            const resp = await fetch("/api/start_interview", {
                method: "POST",
                headers: {"Content-Type": "application/json"},
                body: JSON.stringify({
                    language: selectedLanguage, // –ü–µ—Ä–µ–¥–∞–µ–º —è–∑—ã–∫, —Ç–µ–∫—Å –∏ —Ç–µ–º—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                    resume_text: resumeText,
                    topic: topic
                })
            });
            
            if (!resp.ok) {
                throw new Error(`HTTP error! status: ${resp.status}`);
            }
            
            const data = await resp.json();
            console.log("Response data:", data);
            
            if (data.error) {
                alert("–û—à–∏–±–∫–∞: " + data.error);
                return;
            }
            
            sessionId = data.session_id;
            setupSection.classList.add("hidden");
            chatSection.classList.remove("hidden");

            addMessage("–ò–Ω—Ç–µ—Ä–≤—å—é –Ω–∞—á–∞–ª–æ—Å—å! " + data.question, "bot");
        } catch (error) {
            console.error("Error starting interview:", error);
            alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è: " + error.message);
        }
    }

    window.sendAnswer = async function() {
        const answer = userInput.value.trim();
        if (!answer) return;
        
        addMessage(answer, "user");
        userInput.value = "";

        try {
            const resp = await fetch("/api/answer", {
                method: "POST",
                headers: {"Content-Type": "application/json"},
                body: JSON.stringify({ 
                    session_id: sessionId, 
                    answer,
                    language: selectedLanguage // –ü–µ—Ä–µ–¥–∞–µ–º —è–∑—ã–∫ —Å –∫–∞–∂–¥—ã–º –æ—Ç–≤–µ—Ç–æ–º
                })
            });
            
            if (!resp.ok) {
                throw new Error(`HTTP error! status: ${resp.status}`);
            }
            
            const data = await resp.json();
            console.log("Answer response:", data);

            if (data.next_question) {
                addMessage(data.next_question, "bot");
            }
            if (data.finished) {
                if (data.passed) {
                    addMessage("‚úÖ –ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ: –ö–∞–Ω–¥–∏–¥–∞—Ç –ø—Ä–æ—à—ë–ª!", "bot");
                } else {
                    addMessage("‚ùå –ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ: –ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –ø—Ä–æ—à—ë–ª.", "bot");
                }
                userInput.disabled = true;
                document.querySelector('button[onclick="sendAnswer()"]').disabled = true;
                if (voiceBtn) voiceBtn.disabled = true;
                
                // –û—á–∏—â–∞–µ–º localStorage –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é
                localStorage.removeItem('interview_language');
            }
        } catch (error) {
            console.error("Error sending answer:", error);
            addMessage("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: " + error.message, "bot");
        }
    }

    // –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;

    if (SpeechRecognition) {
        const recognition = new SpeechRecognition();
        recognition.lang = speechLang; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫
        recognition.continuous = false;
        recognition.interimResults = false;

        voiceBtn.addEventListener("click", () => {
            recognition.start();
            voiceBtn.textContent = "üé§ –°–ª—É—à–∞—é...";
        });

        recognition.addEventListener("result", (event) => {
            const transcript = event.results[0][0].transcript;
            userInput.value = transcript;
            voiceBtn.textContent = "üé§ –ì–æ–≤–æ—Ä–∏—Ç—å";
            sendAnswer();
        });

        recognition.addEventListener("end", () => {
            console.log("–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
            voiceBtn.textContent = "üé§ –ì–æ–≤–æ—Ä–∏—Ç—å";
        });

        recognition.addEventListener("error", (event) => {
            console.error("–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:", event.error);
            voiceBtn.textContent = "üé§ –ì–æ–≤–æ—Ä–∏—Ç—å";
            addMessage("–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤—Ä—É—á–Ω—É—é.", "bot");
        });

    } else {
        alert("–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥");
    }

    // –û—á–∏—Å—Ç–∫–∞ localStorage –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    window.addEventListener('beforeunload', function() {
        localStorage.removeItem('interview_language');
    });
});